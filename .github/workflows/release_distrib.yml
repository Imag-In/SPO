# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Relase native distribution

on:
  push:
    branches: [ main ]
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-jar:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'
          java-package: 'jdk+fx'
          architecture: 'x64' # defaults to 'x64'
      #          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v3
        id: spo-maven
        with:
          path: ~/.m2/repository
          key: spo-maven
          restore-keys: |
            spo-maven

      - name: Maven bump version
        run: ./mvnw -B build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}'

      - name: Build jar
        run: ./mvnw -V -B -fae clean verify -f pom.xml

      - name: Get version
        id: get-version
        run: |
          mkdir -p target
          SPO_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          SPO_FINAL_NAME=$(./mvnw help:evaluate -Dexpression=project.build.finalName -q -DforceStdout)
          SPO_DESC=$(./mvnw help:evaluate -Dexpression=project.description -q -DforceStdout)
          SPO_ARTIFACT_ID=$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          SPO_GROUP_ID=$(./mvnw help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          echo "SPO_VERSION=${SPO_VERSION}" >> $GITHUB_OUTPUT
          echo "JAVA_VERSION=21" > target/build.env
          echo "MAIN_JAR=${SPO_FINAL_NAME}.jar" >> target/build.env
          echo "SPO_ARTIFACT_ID=${SPO_ARTIFACT_ID}" >> target/build.env
          echo "SPO_GROUP_ID=${SPO_GROUP_ID}" >> target/build.env
          echo "SPO_VERSION=${SPO_VERSION}" >> target/build.env
          echo "APP_NAME=SPO" >> target/build.env
          echo "APP_MAIN_CLASS=org.icroco.picture.ImagInApp" >> target/build.env
          echo "APP_DESC=${SPO_DESC}" >> target/build.env
          echo "APP_VENDOR=Imge'In" >> target/build.env

      - name: Shared jar files
        uses: actions/upload-artifact@v3
        with:
          name: release-jar
          path: |
            target/build.env
            target/*.jar
          retention-days: 1

      - name: Print build.env
        run: cat target/build.env

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "target/spo-full.jar"
          allowUpdates: "true"
          tag: "v${{ steps.get-version.outputs.SPO_VERSION }}"

      - name: Maven next version
        run: ./mvnw -B build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}-SNAPSHOT'

      - name: Commit version
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Christophe
          author_email: ouaibsky@gmail.com
          message: "Next Version ${{ steps.get-version.outputs.SPO_VERSION }} [skip ci]"
          add: 'pom.xml'
          tag: "v${{ steps.get-version.outputs.SPO_VERSION }} --force"

  build-osx:
    runs-on: macos-latest
    permissions:
      contents: write
    needs: build-jar
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'
          java-package: 'jdk+fx'
          architecture: 'x64' # defaults to 'x64'

      - name: Download jar files
        uses: actions/download-artifact@v3
        with:
          name: release-jar

      - uses: cardinalby/export-env-action@v2
        with:
          envFile: 'build.env'

      - name: Extract dependencies
        run: java -Djarmode=layertools -jar spo-full.jar extract

      - name: Create Distribution
        run: |
          ./src/distrib/mac/build_app_macos.sh
          ls -la build/installer

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/installer/*.dmg,build/installer/*.pkg,build/installer/*.sha256"
          allowUpdates: "true"
          tag: v${{ env.SPO_VERSION }}

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build-jar
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'
          java-package: 'jdk+fx'
          architecture: 'x64' # defaults to 'x64'

      - name: Download jar files
        uses: actions/download-artifact@v3
        with:
          name: release-jar

      - uses: cardinalby/export-env-action@v2
        with:
          envFile: 'build.env'

      - name: Extract dependencies
        run: java -Djarmode=layertools -jar spo-full.jar extract

      - name: Create Distribution
        run: |
          chmod a+x ./src/distrib/linux/build_app_linux.sh
          ./src/distrib/linux/build_app_linux.sh
          ls -la build/installer

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/installer/*.deb,build/installer/*.rpm,build/installer/*.sha256"
          allowUpdates: "true"
          tag: v${{ env.SPO_VERSION }}

  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    needs: build-jar
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'
          java-package: 'jdk+fx'
          architecture: 'x64' # defaults to 'x64'

      - name: Download jar files
        uses: actions/download-artifact@v3
        with:
          name: release-jar

      - uses: cardinalby/export-env-action@v2
        with:
          envFile: 'build.env'
      - name: Download Wix
        uses: i3h/download-release-asset@v1
        with:
          owner: wixtoolset
          repo: wix3
          tag: wix3112rtm
          file: wix311-binaries.zip
      - name: Decompress Wix
        uses: DuckSoft/extract-7z-action@v1.0
        with:
          pathSource: wix311-binaries.zip
          pathTarget: ./target/wix
      - name: Extract dependencies
        run: java -Djarmode=layertools -jar spo-full.jar extract

      - name: Create Distribution
        run: |
          .\src\distrib\win\build_app_windows.bat
          dir build\installer

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/installer/*.msi,build/installer/*.exe,build/installer/*.sha256"
          allowUpdates: "true"
          tag: v${{ env.SPO_VERSION }}


#  build-linux:
#    runs-on: ubuntu-latest
#    needs: build-osx
#    permissions:
#      contents: write
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'zulu' # See 'Supported distributions' for available options
#          java-version: '21'
#          java-package: 'jdk+fx'
#          architecture: 'x64' # defaults to 'x64'
#      #          cache: 'maven'
#      - name: Cache Maven packages
#        uses: actions/cache@v3
#        id: cache-maven
#        with:
#          path: .m2
#          key: spo-mvnw
#      #      - name: Cache Maven packages
#      #        uses: actions/cache@v3
#      #        with:
#      #          path: ~/.m2
#      #          key: ${{ runner.os }}-maven
#      #          #          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#      #          restore-keys: spo-mvnw
#
#      - name: Build with Maven
#        run: mvn -V -B -fae clean verify -Drelease -f pom.xml
#
#      - uses: ncipollo/release-action@v1
#        with:
#          artifacts: "target/*.deb"
#          allowUpdates: "true"
#
#  build-win:
#    runs-on: windows-latest
#    needs: build-linux
#    steps:
#      - uses: actions/checkout@v4
#      - name: Download Wix
#        uses: i3h/download-release-asset@v1
#        with:
#          owner: wixtoolset
#          repo: wix3
#          tag: wix3112rtm
#          file: wix311-binaries.zip
#      - name: Decompress Wix
#        uses: DuckSoft/extract-7z-action@v1.0
#        with:
#          pathSource: wix311-binaries.zip
#          pathTarget: ./target/wix
#      - name: Add Wix to Path
#        run: echo "$HOME/target/wix" >> $GITHUB_PATH
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'zulu' # See 'Supported distributions' for available options
#          java-version: '21'
#          java-package: 'jdk+fx'
#          architecture: 'x64' # defaults to 'x64'
#      #          cache: 'maven'
#
#      #      - name: Cache Maven packages
#      #        uses: actions/cache@v3
#      #        with:
#      #          path: ~/.m2
#      #          key: spo-mvnw
#      #          #          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#      #          restore-keys: spo-mvnw
#
#      - name: Build with Maven
#        run: mvn -V -B -fae -Drelease -D"windows.upgrade.uuid=${{ secrets.WINDOWS_INSTALLER_UUID }}" -e -f pom.xml clean verify
#      - name: dir
#        run: dir .\target
#        continue-on-error: true
#
#      - uses: ncipollo/release-action@v1
#        with:
#          artifacts: "target/*.msi"
#          allowUpdates: "true"


#
#  build-linux:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v2
#    - name: Set up JDK 21
#      uses: actions/setup-java@v3
#      with:
#        distribution: 'temurin' # See 'Supported distributions' for available options
#        java-version: '21'
#        architecture: 'x64' # defaults to 'x64'
#        cache: 'maven'
#
#    - name: Cache Maven packages
#      uses: actions/cache@v2
#      with:
#        path: ~/.m2
#        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#        restore-keys: ${{ runner.os }}-m2
#
#    - name: Build with Maven
#      run: mvn clean install -Ppackage -f PhotoSlide/pom.xml
#
#    - name: Get release
#      id: get_release
#      uses: bruceadams/get-release@v1.3.2
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#
#    - name: Upload Release Asset Linux
#      id: upload-release-asset
#      uses: csexton/release-asset-action@v2
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        pattern: PhotoSlide/target/*.deb
#        release-url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        github-token: ${{ secrets.GITHUB_TOKEN }}
